// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/30/2017 12:18:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FullBaseStation
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FullBaseStation_vlg_sample_tst(
	clk,
	Input,
	PB0,
	PB1,
	sampler_tx
);
input  clk;
input [7:0] Input;
input  PB0;
input  PB1;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Input or PB0 or PB1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FullBaseStation_vlg_check_tst (
	Current_register,
	led_dp,
	ledsegment,
	ledsel,
	sampler_rx
);
input [15:0] Current_register;
input  led_dp;
input [6:0] ledsegment;
input [3:0] ledsel;
input sampler_rx;

reg [15:0] Current_register_expected;
reg  led_dp_expected;
reg [6:0] ledsegment_expected;
reg [3:0] ledsel_expected;

reg [15:0] Current_register_prev;
reg  led_dp_prev;
reg [6:0] ledsegment_prev;
reg [3:0] ledsel_prev;

reg [15:0] Current_register_expected_prev;
reg [6:0] ledsegment_expected_prev;

reg [15:0] last_Current_register_exp;
reg [6:0] last_ledsegment_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Current_register_prev = Current_register;
	led_dp_prev = led_dp;
	ledsegment_prev = ledsegment;
	ledsel_prev = ledsel;
end

// update expected /o prevs

always @(trigger)
begin
	Current_register_expected_prev = Current_register_expected;
	ledsegment_expected_prev = ledsegment_expected;
end


// expected ledsegment[ 6 ]
initial
begin
	ledsegment_expected[6] = 1'bX;
end 
// expected ledsegment[ 5 ]
initial
begin
	ledsegment_expected[5] = 1'bX;
end 
// expected ledsegment[ 4 ]
initial
begin
	ledsegment_expected[4] = 1'bX;
end 
// expected ledsegment[ 3 ]
initial
begin
	ledsegment_expected[3] = 1'bX;
end 
// expected ledsegment[ 2 ]
initial
begin
	ledsegment_expected[2] = 1'bX;
end 
// expected ledsegment[ 1 ]
initial
begin
	ledsegment_expected[1] = 1'bX;
end 
// expected ledsegment[ 0 ]
initial
begin
	ledsegment_expected[0] = 1'bX;
end 
// expected Current_register[ 15 ]
initial
begin
	Current_register_expected[15] = 1'bX;
end 
// expected Current_register[ 14 ]
initial
begin
	Current_register_expected[14] = 1'bX;
end 
// expected Current_register[ 13 ]
initial
begin
	Current_register_expected[13] = 1'bX;
end 
// expected Current_register[ 12 ]
initial
begin
	Current_register_expected[12] = 1'bX;
end 
// expected Current_register[ 11 ]
initial
begin
	Current_register_expected[11] = 1'bX;
end 
// expected Current_register[ 10 ]
initial
begin
	Current_register_expected[10] = 1'bX;
end 
// expected Current_register[ 9 ]
initial
begin
	Current_register_expected[9] = 1'bX;
end 
// expected Current_register[ 8 ]
initial
begin
	Current_register_expected[8] = 1'bX;
end 
// expected Current_register[ 7 ]
initial
begin
	Current_register_expected[7] = 1'bX;
end 
// expected Current_register[ 6 ]
initial
begin
	Current_register_expected[6] = 1'bX;
end 
// expected Current_register[ 5 ]
initial
begin
	Current_register_expected[5] = 1'bX;
end 
// expected Current_register[ 4 ]
initial
begin
	Current_register_expected[4] = 1'bX;
end 
// expected Current_register[ 3 ]
initial
begin
	Current_register_expected[3] = 1'bX;
end 
// expected Current_register[ 2 ]
initial
begin
	Current_register_expected[2] = 1'bX;
end 
// expected Current_register[ 1 ]
initial
begin
	Current_register_expected[1] = 1'bX;
end 
// expected Current_register[ 0 ]
initial
begin
	Current_register_expected[0] = 1'bX;
end 
// generate trigger
always @(Current_register_expected or Current_register or led_dp_expected or led_dp or ledsegment_expected or ledsegment or ledsel_expected or ledsel)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Current_register = %b | expected led_dp = %b | expected ledsegment = %b | expected ledsel = %b | ",Current_register_expected_prev,led_dp_expected_prev,ledsegment_expected_prev,ledsel_expected_prev);
	$display("| real Current_register = %b | real led_dp = %b | real ledsegment = %b | real ledsel = %b | ",Current_register_prev,led_dp_prev,ledsegment_prev,ledsel_prev);
`endif
	if (
		( Current_register_expected_prev[0] !== 1'bx ) && ( Current_register_prev[0] !== Current_register_expected_prev[0] )
		&& ((Current_register_expected_prev[0] !== last_Current_register_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[0] = Current_register_expected_prev[0];
	end
	if (
		( Current_register_expected_prev[1] !== 1'bx ) && ( Current_register_prev[1] !== Current_register_expected_prev[1] )
		&& ((Current_register_expected_prev[1] !== last_Current_register_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[1] = Current_register_expected_prev[1];
	end
	if (
		( Current_register_expected_prev[2] !== 1'bx ) && ( Current_register_prev[2] !== Current_register_expected_prev[2] )
		&& ((Current_register_expected_prev[2] !== last_Current_register_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[2] = Current_register_expected_prev[2];
	end
	if (
		( Current_register_expected_prev[3] !== 1'bx ) && ( Current_register_prev[3] !== Current_register_expected_prev[3] )
		&& ((Current_register_expected_prev[3] !== last_Current_register_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[3] = Current_register_expected_prev[3];
	end
	if (
		( Current_register_expected_prev[4] !== 1'bx ) && ( Current_register_prev[4] !== Current_register_expected_prev[4] )
		&& ((Current_register_expected_prev[4] !== last_Current_register_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[4] = Current_register_expected_prev[4];
	end
	if (
		( Current_register_expected_prev[5] !== 1'bx ) && ( Current_register_prev[5] !== Current_register_expected_prev[5] )
		&& ((Current_register_expected_prev[5] !== last_Current_register_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[5] = Current_register_expected_prev[5];
	end
	if (
		( Current_register_expected_prev[6] !== 1'bx ) && ( Current_register_prev[6] !== Current_register_expected_prev[6] )
		&& ((Current_register_expected_prev[6] !== last_Current_register_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[6] = Current_register_expected_prev[6];
	end
	if (
		( Current_register_expected_prev[7] !== 1'bx ) && ( Current_register_prev[7] !== Current_register_expected_prev[7] )
		&& ((Current_register_expected_prev[7] !== last_Current_register_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[7] = Current_register_expected_prev[7];
	end
	if (
		( Current_register_expected_prev[8] !== 1'bx ) && ( Current_register_prev[8] !== Current_register_expected_prev[8] )
		&& ((Current_register_expected_prev[8] !== last_Current_register_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[8] = Current_register_expected_prev[8];
	end
	if (
		( Current_register_expected_prev[9] !== 1'bx ) && ( Current_register_prev[9] !== Current_register_expected_prev[9] )
		&& ((Current_register_expected_prev[9] !== last_Current_register_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[9] = Current_register_expected_prev[9];
	end
	if (
		( Current_register_expected_prev[10] !== 1'bx ) && ( Current_register_prev[10] !== Current_register_expected_prev[10] )
		&& ((Current_register_expected_prev[10] !== last_Current_register_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[10] = Current_register_expected_prev[10];
	end
	if (
		( Current_register_expected_prev[11] !== 1'bx ) && ( Current_register_prev[11] !== Current_register_expected_prev[11] )
		&& ((Current_register_expected_prev[11] !== last_Current_register_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[11] = Current_register_expected_prev[11];
	end
	if (
		( Current_register_expected_prev[12] !== 1'bx ) && ( Current_register_prev[12] !== Current_register_expected_prev[12] )
		&& ((Current_register_expected_prev[12] !== last_Current_register_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[12] = Current_register_expected_prev[12];
	end
	if (
		( Current_register_expected_prev[13] !== 1'bx ) && ( Current_register_prev[13] !== Current_register_expected_prev[13] )
		&& ((Current_register_expected_prev[13] !== last_Current_register_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[13] = Current_register_expected_prev[13];
	end
	if (
		( Current_register_expected_prev[14] !== 1'bx ) && ( Current_register_prev[14] !== Current_register_expected_prev[14] )
		&& ((Current_register_expected_prev[14] !== last_Current_register_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[14] = Current_register_expected_prev[14];
	end
	if (
		( Current_register_expected_prev[15] !== 1'bx ) && ( Current_register_prev[15] !== Current_register_expected_prev[15] )
		&& ((Current_register_expected_prev[15] !== last_Current_register_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_register[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_register_expected_prev);
		$display ("     Real value = %b", Current_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_register_exp[15] = Current_register_expected_prev[15];
	end
	if (
		( ledsegment_expected_prev[0] !== 1'bx ) && ( ledsegment_prev[0] !== ledsegment_expected_prev[0] )
		&& ((ledsegment_expected_prev[0] !== last_ledsegment_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsegment[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsegment_expected_prev);
		$display ("     Real value = %b", ledsegment_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsegment_exp[0] = ledsegment_expected_prev[0];
	end
	if (
		( ledsegment_expected_prev[1] !== 1'bx ) && ( ledsegment_prev[1] !== ledsegment_expected_prev[1] )
		&& ((ledsegment_expected_prev[1] !== last_ledsegment_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsegment[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsegment_expected_prev);
		$display ("     Real value = %b", ledsegment_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsegment_exp[1] = ledsegment_expected_prev[1];
	end
	if (
		( ledsegment_expected_prev[2] !== 1'bx ) && ( ledsegment_prev[2] !== ledsegment_expected_prev[2] )
		&& ((ledsegment_expected_prev[2] !== last_ledsegment_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsegment[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsegment_expected_prev);
		$display ("     Real value = %b", ledsegment_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsegment_exp[2] = ledsegment_expected_prev[2];
	end
	if (
		( ledsegment_expected_prev[3] !== 1'bx ) && ( ledsegment_prev[3] !== ledsegment_expected_prev[3] )
		&& ((ledsegment_expected_prev[3] !== last_ledsegment_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsegment[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsegment_expected_prev);
		$display ("     Real value = %b", ledsegment_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsegment_exp[3] = ledsegment_expected_prev[3];
	end
	if (
		( ledsegment_expected_prev[4] !== 1'bx ) && ( ledsegment_prev[4] !== ledsegment_expected_prev[4] )
		&& ((ledsegment_expected_prev[4] !== last_ledsegment_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsegment[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsegment_expected_prev);
		$display ("     Real value = %b", ledsegment_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsegment_exp[4] = ledsegment_expected_prev[4];
	end
	if (
		( ledsegment_expected_prev[5] !== 1'bx ) && ( ledsegment_prev[5] !== ledsegment_expected_prev[5] )
		&& ((ledsegment_expected_prev[5] !== last_ledsegment_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsegment[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsegment_expected_prev);
		$display ("     Real value = %b", ledsegment_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsegment_exp[5] = ledsegment_expected_prev[5];
	end
	if (
		( ledsegment_expected_prev[6] !== 1'bx ) && ( ledsegment_prev[6] !== ledsegment_expected_prev[6] )
		&& ((ledsegment_expected_prev[6] !== last_ledsegment_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledsegment[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledsegment_expected_prev);
		$display ("     Real value = %b", ledsegment_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledsegment_exp[6] = ledsegment_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FullBaseStation_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] Input;
reg PB0;
reg PB1;
// wires                                               
wire [15:0] Current_register;
wire led_dp;
wire [6:0] ledsegment;
wire [3:0] ledsel;

wire sampler;                             

// assign statements (if any)                          
FullBaseStation i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Current_register(Current_register),
	.\Input (Input),
	.led_dp(led_dp),
	.ledsegment(ledsegment),
	.ledsel(ledsel),
	.PB0(PB0),
	.PB1(PB1)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 
// \Input [ 7 ]
initial
begin
	Input[7] = 1'b0;
end 
// \Input [ 6 ]
initial
begin
	Input[6] = 1'b0;
end 
// \Input [ 5 ]
initial
begin
	Input[5] = 1'b0;
end 
// \Input [ 4 ]
initial
begin
	Input[4] = 1'b0;
end 
// \Input [ 3 ]
initial
begin
	Input[3] = 1'b0;
end 
// \Input [ 2 ]
initial
begin
	Input[2] = 1'b1;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b1;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b1;
end 

FullBaseStation_vlg_sample_tst tb_sample (
	.clk(clk),
	.Input(Input),
	.PB0(PB0),
	.PB1(PB1),
	.sampler_tx(sampler)
);

FullBaseStation_vlg_check_tst tb_out(
	.Current_register(Current_register),
	.led_dp(led_dp),
	.ledsegment(ledsegment),
	.ledsel(ledsel),
	.sampler_rx(sampler)
);
endmodule

