
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001e9  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015b  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000172  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017e  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <usart_init>:
/********************/

void usart_init(uint16_t MYUBRR)
{
	// Set baud rate using register UBRR0H and UBRR0L
    UBRR0H = (MYUBRR >> 8);
  80:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = MYUBRR;
  84:	80 93 c4 00 	sts	0x00C4, r24


	// Enable USART transmitter inside register UCSR0B
	UCSR0B |= (1<<TXEN0);
  88:	e1 ec       	ldi	r30, 0xC1	; 193
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	80 83       	st	Z, r24
	

	// Setting the number of data bits (Character Size) in a frame the Receiver and Transmitter use
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  92:	e2 ec       	ldi	r30, 0xC2	; 194
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	86 60       	ori	r24, 0x06	; 6
  9a:	80 83       	st	Z, r24
  9c:	08 95       	ret

0000009e <usart_transmit>:

void usart_transmit(uint8_t data )
{
	/* Wait for empty UDR register */
	// when UDRE0 is 1 the buffer is empty, 
	while (   !((1<<UDRE0) & UCSR0A)      );
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	95 ff       	sbrs	r25, 5
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <usart_transmit+0x4>

	/* Put data into UDR0, sends the data */
    UDR0 = data;
  a8:	80 93 c6 00 	sts	0x00C6, r24
  ac:	08 95       	ret

000000ae <main>:
int main( void )
{

	uint8_t data =0;  // initialize vale for data thats being transmitted

	usart_init (MYUBRR ); // Calling the function that initializes the serial port
  ae:	87 e6       	ldi	r24, 0x67	; 103
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 40 00 	call	0x80	; 0x80 <usart_init>

	uint8_t TXBUF[] = {7}; // Data array being transmitted

	uint8_t txindex = 0;  // initialize index position of array
  b6:	c0 e0       	ldi	r28, 0x00	; 0
		data = TXBUF[txindex]; //read array into data variable
		usart_transmit (data); //Transmit data by calling usart_transmit function
		txindex ++;
	}
	else 
		txindex = 0;  // reset the value of the index back to 0
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x10>
  bc:	cd 2f       	mov	r28, r29

while (1){
// if array index is less that 8 then complete the follow:
	if(txindex < 8) {
		data = TXBUF[txindex]; //read array into data variable
		usart_transmit (data); //Transmit data by calling usart_transmit function
  be:	87 e0       	ldi	r24, 0x07	; 7
  c0:	0e 94 4f 00 	call	0x9e	; 0x9e <usart_transmit>
		txindex ++;
  c4:	cf 5f       	subi	r28, 0xFF	; 255

	uint8_t txindex = 0;  // initialize index position of array

while (1){
// if array index is less that 8 then complete the follow:
	if(txindex < 8) {
  c6:	c8 30       	cpi	r28, 0x08	; 8
  c8:	c8 f7       	brcc	.-14     	; 0xbc <main+0xe>
  ca:	f9 cf       	rjmp	.-14     	; 0xbe <main+0x10>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
